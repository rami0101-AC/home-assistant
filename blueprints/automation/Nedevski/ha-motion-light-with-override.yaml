blueprint:
  name: Motion Light with Override
  description: Turns a light on based on detected motion. Does NOT trigger if the
    light switch is `on` or if it has been turned `off` in the last `X` seconds.
  domain: automation
  input:
    input_motion_sensor_entity:
      name: Motion Sensor
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
          multiple: false
    input_light_switch_entity:
      name: Light Switch Entity
      selector:
        entity:
          domain: binary_sensor
          device_class: power
          multiple: false
    cooldown_period:
      name: Cooldown Period
      selector:
        number:
          min: 0.0
          max: 1800.0
          step: 1.0
          mode: box
          unit_of_measurement: seconds
    target_light_entity:
      name: The light to control
      selector:
        target:
          entity:
            domain: light
  source_url: https://gist.github.com/Nedevski/451c60c24177e5864aff1bfbd544ed85#file-motion_light_with_override-yaml
variables:
  switchEntityVar: !input input_light_switch_entity
  cooldownPeriodVar: !input cooldown_period
alias: Test Light Motion (Duplicate)
description: ''
trigger:
- platform: state
  entity_id:
  - !input input_motion_sensor_entity
  id: Motion Triggered
  from: 'off'
  to: 'on'
- platform: state
  entity_id:
  - !input input_motion_sensor_entity
  id: Motion Cleared
  from: 'on'
  to: 'off'
condition: []
action:
- choose:
  - conditions:
    - condition: and
      conditions:
      - condition: trigger
        id: Motion Triggered
      - condition: state
        entity_id: !input input_light_switch_entity
        state: 'off'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states[switchEntityVar].last_changed)
          > cooldownPeriodVar }}'
    sequence:
    - service: light.turn_on
      target: !input target_light_entity
  - conditions:
    - condition: and
      conditions:
      - condition: trigger
        id: Motion Cleared
      - condition: state
        entity_id: !input input_light_switch_entity
        state: 'off'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states[switchEntityVar].last_changed)
          > cooldownPeriodVar }}'
    sequence:
    - service: light.turn_off
      target: !input target_light_entity
  default: []
mode: parallel
max: 3
